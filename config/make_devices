#! /usr/bin/env bash
#------------------------------------------------------------------------------#
# This script generates device initialization routines based on the rules
# defined by the user at configuration.
#------------------------------------------------------------------------------#

header=$2/ocl_device_config.h
src=$2/ocl_device_config.c

#------------------------------------------------------------------------------#
# begin header creation
#------------------------------------------------------------------------------#

echo "/*" > $header
echo " * THIS FILE WAS GENERATED BY config/make_devices DO NOT EDIT" >> $header
echo "*/" >> $header
echo "" >> $header
echo "#if !defined(_ocl_source) && !defined(_include_ocl_h)" >> $header
echo "#error \"Error: do not include this file directly, use #include <ocl.h>\"" >> $header
echo "#endif" >> $header
echo "" >> $header
echo "#ifndef ocl_device_config_h" >> $header
echo "#define ocl_device_config_h" >> $header
echo "" >> $header
echo "#include <stdint.h>" >> $header
echo "#include <stddef.h>" >> $header
echo "" >> $header
echo "static const uint32_t OCL_DEFAULT_DEVICE = 0;" >> $header


#------------------------------------------------------------------------------#
# begin source creation
#------------------------------------------------------------------------------#

echo "/*" > $src
echo " * THIS FILE WAS GENERATED BY config/make_devices DO NOT EDIT" >> $src
echo "*/" >> $src
echo "" >> $src
echo "#define _ocl_source" >> $src
echo "" >> $src
echo "#include <ocl_data.h>" >> $src
echo "#include <ocl_device.h>" >> $src
echo "#include <ocl_device_config.h>" >> $src
echo "" >> $src
echo "extern ocl_data_t ocl;" >> $src
echo "" >> $src

#------------------------------------------------------------------------------#
# begin source creation
#------------------------------------------------------------------------------#

(
	# tokenize on ":" to split devices
	IFS=":";

	device_list=( $1 )
	num_devices=${#device_list[@]}

	echo "const char * device_platforms["$num_devices"] = {" >> $src

	i=0
	for device in $1 ; do
		(
			# tokenize on "," to split device parameters
			IFS=",";
			token=( $device )

			echo "static const uint32_t "${token[0]}" = "$i";" >> $header

			if [ "$((i+1))" -lt "$num_devices" ] ; then
				echo "	\""${token[1]}"\"," >> $src
			else
				echo "	\""${token[1]}"\"" >> $src
			fi
		) # scope
		i=$((i+1))
	done

	echo "};" >> $src
	echo "" >> $src

	echo "ocl_init_t device_initializers["$num_devices"] = {" >> $src

	i=0
	for device in $1 ; do
		(
			# tokenize on "," to split device parameters
			IFS=",";
			token=( $device )

			if [ "$((i+1))" -lt "$num_devices" ] ; then
				echo "	&"${token[2]}"," >> $src
			else
				echo "	&"${token[2]}"" >> $src
			fi
		) # scope
		i=$((i+1))
	done

	echo "};" >> $src

	echo "" >> $header
	echo "int32_t ocl_init_devices(size_t thread);" >> $header
	echo "int32_t ocl_finalize_devices();" >> $header

	echo "" >> $src
	echo "int32_t ocl_init_devices(size_t thread) {" >> $src
	echo "	int32_t ierr = 0;" >> $src
	echo "" >> $src
	echo "	for(size_t i=0; i<"$num_devices"; ++i) {" >> $src
	echo "		ierr |= (device_initializers[i])(&ocl.devices[i]," >> $src
	echo "			device_platforms[i], thread);" >> $src
	echo "	} // for" >> $src
	echo "" >> $src
	echo "	return ierr;" >> $src
	echo "} // ocl_init_devices" >> $src

	echo "" >> $src
	echo "int32_t ocl_finalize_devices() {" >> $src
	echo "	int32_t ierr = 0;" >> $src
	echo "" >> $src
	echo "	for(size_t i=0; i<"$num_devices"; ++i) {" >> $src
	echo "		ocl_finalize_device(&ocl.devices[i]);" >> $src
	echo "	} // for" >> $src
	echo "" >> $src
	echo "	return ierr;" >> $src
	echo "} // ocl_init_devices" >> $src
) # scope

#------------------------------------------------------------------------------#
# finish header creation
#------------------------------------------------------------------------------#

echo "" >> $header
echo "#endif // ocl_device_config_h" >> $header
